// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: traindb.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ManifestChange_ChangeType int32

const (
	ManifestChange_Create ManifestChange_ChangeType = 0
	ManifestChange_Delete ManifestChange_ChangeType = 1
)

var ManifestChange_ChangeType_name = map[int32]string{
	0: "Create",
	1: "Delete",
}

var ManifestChange_ChangeType_value = map[string]int32{
	"Create": 0,
	"Delete": 1,
}

func (x ManifestChange_ChangeType) String() string {
	return proto.EnumName(ManifestChange_ChangeType_name, int32(x))
}

func (ManifestChange_ChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1ca28fc36488aaf6, []int{1, 0}
}

type ManifestChangeSet struct {
	Changes              []*ManifestChange `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ManifestChangeSet) Reset()         { *m = ManifestChangeSet{} }
func (m *ManifestChangeSet) String() string { return proto.CompactTextString(m) }
func (*ManifestChangeSet) ProtoMessage()    {}
func (*ManifestChangeSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ca28fc36488aaf6, []int{0}
}
func (m *ManifestChangeSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManifestChangeSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManifestChangeSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManifestChangeSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManifestChangeSet.Merge(m, src)
}
func (m *ManifestChangeSet) XXX_Size() int {
	return m.Size()
}
func (m *ManifestChangeSet) XXX_DiscardUnknown() {
	xxx_messageInfo_ManifestChangeSet.DiscardUnknown(m)
}

var xxx_messageInfo_ManifestChangeSet proto.InternalMessageInfo

func (m *ManifestChangeSet) GetChanges() []*ManifestChange {
	if m != nil {
		return m.Changes
	}
	return nil
}

type ManifestChange struct {
	Id                   uint64                    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Type                 ManifestChange_ChangeType `protobuf:"varint,2,opt,name=Type,proto3,enum=ManifestChange_ChangeType" json:"Type,omitempty"`
	LevelId              uint32                    `protobuf:"varint,3,opt,name=LevelId,proto3" json:"LevelId,omitempty"`
	CheckSum             []byte                    `protobuf:"bytes,4,opt,name=CheckSum,proto3" json:"CheckSum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *ManifestChange) Reset()         { *m = ManifestChange{} }
func (m *ManifestChange) String() string { return proto.CompactTextString(m) }
func (*ManifestChange) ProtoMessage()    {}
func (*ManifestChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ca28fc36488aaf6, []int{1}
}
func (m *ManifestChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ManifestChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ManifestChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ManifestChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ManifestChange.Merge(m, src)
}
func (m *ManifestChange) XXX_Size() int {
	return m.Size()
}
func (m *ManifestChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ManifestChange.DiscardUnknown(m)
}

var xxx_messageInfo_ManifestChange proto.InternalMessageInfo

func (m *ManifestChange) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ManifestChange) GetType() ManifestChange_ChangeType {
	if m != nil {
		return m.Type
	}
	return ManifestChange_Create
}

func (m *ManifestChange) GetLevelId() uint32 {
	if m != nil {
		return m.LevelId
	}
	return 0
}

func (m *ManifestChange) GetCheckSum() []byte {
	if m != nil {
		return m.CheckSum
	}
	return nil
}

type TableIndex struct {
	Offsets              []*BlockOffset `protobuf:"bytes,1,rep,name=offsets,proto3" json:"offsets,omitempty"`
	BloomFilter          []byte         `protobuf:"bytes,2,opt,name=bloomFilter,proto3" json:"bloomFilter,omitempty"`
	MaxVersion           uint64         `protobuf:"varint,3,opt,name=maxVersion,proto3" json:"maxVersion,omitempty"`
	KeyCount             uint32         `protobuf:"varint,4,opt,name=keyCount,proto3" json:"keyCount,omitempty"`
	StaleDataSize        uint32         `protobuf:"varint,5,opt,name=staleDataSize,proto3" json:"staleDataSize,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *TableIndex) Reset()         { *m = TableIndex{} }
func (m *TableIndex) String() string { return proto.CompactTextString(m) }
func (*TableIndex) ProtoMessage()    {}
func (*TableIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ca28fc36488aaf6, []int{2}
}
func (m *TableIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TableIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TableIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TableIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TableIndex.Merge(m, src)
}
func (m *TableIndex) XXX_Size() int {
	return m.Size()
}
func (m *TableIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_TableIndex.DiscardUnknown(m)
}

var xxx_messageInfo_TableIndex proto.InternalMessageInfo

func (m *TableIndex) GetOffsets() []*BlockOffset {
	if m != nil {
		return m.Offsets
	}
	return nil
}

func (m *TableIndex) GetBloomFilter() []byte {
	if m != nil {
		return m.BloomFilter
	}
	return nil
}

func (m *TableIndex) GetMaxVersion() uint64 {
	if m != nil {
		return m.MaxVersion
	}
	return 0
}

func (m *TableIndex) GetKeyCount() uint32 {
	if m != nil {
		return m.KeyCount
	}
	return 0
}

func (m *TableIndex) GetStaleDataSize() uint32 {
	if m != nil {
		return m.StaleDataSize
	}
	return 0
}

type BlockOffset struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Offset               uint64   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Size_                uint32   `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockOffset) Reset()         { *m = BlockOffset{} }
func (m *BlockOffset) String() string { return proto.CompactTextString(m) }
func (*BlockOffset) ProtoMessage()    {}
func (*BlockOffset) Descriptor() ([]byte, []int) {
	return fileDescriptor_1ca28fc36488aaf6, []int{3}
}
func (m *BlockOffset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockOffset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockOffset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockOffset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockOffset.Merge(m, src)
}
func (m *BlockOffset) XXX_Size() int {
	return m.Size()
}
func (m *BlockOffset) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockOffset.DiscardUnknown(m)
}

var xxx_messageInfo_BlockOffset proto.InternalMessageInfo

func (m *BlockOffset) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *BlockOffset) GetOffset() uint64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *BlockOffset) GetSize_() uint32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func init() {
	proto.RegisterEnum("ManifestChange_ChangeType", ManifestChange_ChangeType_name, ManifestChange_ChangeType_value)
	proto.RegisterType((*ManifestChangeSet)(nil), "ManifestChangeSet")
	proto.RegisterType((*ManifestChange)(nil), "ManifestChange")
	proto.RegisterType((*TableIndex)(nil), "tableIndex")
	proto.RegisterType((*BlockOffset)(nil), "blockOffset")
}

func init() { proto.RegisterFile("traindb.proto", fileDescriptor_1ca28fc36488aaf6) }

var fileDescriptor_1ca28fc36488aaf6 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xc1, 0x6a, 0xdb, 0x40,
	0x10, 0x86, 0xbd, 0xb6, 0x6a, 0x95, 0xb1, 0xe4, 0xba, 0x7b, 0x28, 0xaa, 0x0f, 0x42, 0x08, 0x53,
	0xd4, 0x8b, 0x0a, 0xee, 0xb1, 0xd0, 0x43, 0x65, 0x0a, 0x22, 0x09, 0x81, 0x75, 0xc8, 0x21, 0xb7,
	0x95, 0x35, 0x8e, 0x85, 0x64, 0xad, 0x90, 0xd6, 0xc1, 0xce, 0x93, 0xe4, 0x21, 0xf2, 0x00, 0x79,
	0x84, 0x1c, 0xf3, 0x08, 0xc1, 0x79, 0x91, 0xa0, 0x75, 0xe4, 0xd8, 0x39, 0xed, 0xfc, 0xff, 0xfc,
	0x0c, 0xdf, 0x0c, 0x0b, 0xa6, 0x2c, 0x79, 0x92, 0xc7, 0x91, 0x5f, 0x94, 0x42, 0x0a, 0xf7, 0x2f,
	0x7c, 0x3d, 0xe3, 0x79, 0x32, 0xc7, 0x4a, 0x06, 0x0b, 0x9e, 0x5f, 0xe3, 0x14, 0x25, 0xfd, 0x09,
	0xfa, 0x4c, 0x89, 0xca, 0x22, 0x4e, 0xc7, 0xeb, 0x8d, 0xbf, 0xf8, 0xc7, 0x21, 0xd6, 0xf4, 0xdd,
	0x7b, 0x02, 0xfd, 0xe3, 0x1e, 0xed, 0x43, 0x3b, 0x8c, 0x2d, 0xe2, 0x10, 0x4f, 0x63, 0xed, 0x30,
	0xa6, 0x3e, 0x68, 0x17, 0x9b, 0x02, 0xad, 0xb6, 0x43, 0xbc, 0xfe, 0x78, 0xf8, 0x61, 0x94, 0xbf,
	0x7b, 0xea, 0x04, 0x53, 0x39, 0x6a, 0x81, 0x7e, 0x8a, 0x37, 0x98, 0x85, 0xb1, 0xd5, 0x71, 0x88,
	0x67, 0xb2, 0x46, 0xd2, 0x21, 0x7c, 0x0e, 0x16, 0x38, 0x4b, 0xa7, 0xab, 0xa5, 0xa5, 0x39, 0xc4,
	0x33, 0xd8, 0x5e, 0xbb, 0x23, 0x80, 0xf7, 0x49, 0x14, 0xa0, 0x1b, 0x94, 0xc8, 0x25, 0x0e, 0x5a,
	0x75, 0x3d, 0xc1, 0x0c, 0x25, 0x0e, 0x88, 0xfb, 0x40, 0x00, 0x24, 0x8f, 0x32, 0x0c, 0xf3, 0x18,
	0xd7, 0xf4, 0x07, 0xe8, 0x62, 0x3e, 0xaf, 0x50, 0x36, 0x8b, 0x1a, 0x7e, 0x94, 0x89, 0x59, 0x7a,
	0xae, 0x4c, 0xd6, 0x34, 0xa9, 0x03, 0xbd, 0x28, 0x13, 0x62, 0xf9, 0x3f, 0xc9, 0x24, 0x96, 0x6a,
	0x13, 0x83, 0x1d, 0x5a, 0xd4, 0x06, 0x58, 0xf2, 0xf5, 0x25, 0x96, 0x55, 0x22, 0x72, 0xc5, 0xad,
	0xb1, 0x03, 0xa7, 0x46, 0x4f, 0x71, 0x13, 0x88, 0x55, 0x2e, 0x15, 0xba, 0xc9, 0xf6, 0x9a, 0x8e,
	0xc0, 0xac, 0x24, 0xcf, 0x70, 0xc2, 0x25, 0x9f, 0x26, 0xb7, 0x68, 0x7d, 0x52, 0x81, 0x63, 0xd3,
	0x3d, 0x51, 0x0c, 0x0d, 0x1b, 0x1d, 0x40, 0x27, 0xc5, 0x8d, 0x3a, 0xb3, 0xc1, 0xea, 0x92, 0x7e,
	0x83, 0xee, 0x8e, 0x57, 0xf1, 0x69, 0xec, 0x4d, 0x51, 0x0a, 0x5a, 0x55, 0x4f, 0xdd, 0x1d, 0x53,
	0xd5, 0xff, 0xbe, 0x3f, 0x6e, 0x6d, 0xf2, 0xb4, 0xb5, 0xc9, 0xf3, 0xd6, 0x26, 0x77, 0x2f, 0x76,
	0xeb, 0x4a, 0xf7, 0x7f, 0x15, 0xd1, 0x9f, 0x22, 0x8a, 0xba, 0xea, 0x63, 0xfc, 0x7e, 0x0d, 0x00,
	0x00, 0xff, 0xff, 0x72, 0x5a, 0x46, 0x69, 0x29, 0x02, 0x00, 0x00,
}

func (m *ManifestChangeSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManifestChangeSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManifestChangeSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Changes) > 0 {
		for iNdEx := len(m.Changes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Changes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTraindb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ManifestChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ManifestChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ManifestChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CheckSum) > 0 {
		i -= len(m.CheckSum)
		copy(dAtA[i:], m.CheckSum)
		i = encodeVarintTraindb(dAtA, i, uint64(len(m.CheckSum)))
		i--
		dAtA[i] = 0x22
	}
	if m.LevelId != 0 {
		i = encodeVarintTraindb(dAtA, i, uint64(m.LevelId))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintTraindb(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintTraindb(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TableIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TableIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TableIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StaleDataSize != 0 {
		i = encodeVarintTraindb(dAtA, i, uint64(m.StaleDataSize))
		i--
		dAtA[i] = 0x28
	}
	if m.KeyCount != 0 {
		i = encodeVarintTraindb(dAtA, i, uint64(m.KeyCount))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxVersion != 0 {
		i = encodeVarintTraindb(dAtA, i, uint64(m.MaxVersion))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BloomFilter) > 0 {
		i -= len(m.BloomFilter)
		copy(dAtA[i:], m.BloomFilter)
		i = encodeVarintTraindb(dAtA, i, uint64(len(m.BloomFilter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Offsets) > 0 {
		for iNdEx := len(m.Offsets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Offsets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTraindb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BlockOffset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockOffset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockOffset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Size_ != 0 {
		i = encodeVarintTraindb(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if m.Offset != 0 {
		i = encodeVarintTraindb(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintTraindb(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTraindb(dAtA []byte, offset int, v uint64) int {
	offset -= sovTraindb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ManifestChangeSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Changes) > 0 {
		for _, e := range m.Changes {
			l = e.Size()
			n += 1 + l + sovTraindb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ManifestChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTraindb(uint64(m.Id))
	}
	if m.Type != 0 {
		n += 1 + sovTraindb(uint64(m.Type))
	}
	if m.LevelId != 0 {
		n += 1 + sovTraindb(uint64(m.LevelId))
	}
	l = len(m.CheckSum)
	if l > 0 {
		n += 1 + l + sovTraindb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TableIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offsets) > 0 {
		for _, e := range m.Offsets {
			l = e.Size()
			n += 1 + l + sovTraindb(uint64(l))
		}
	}
	l = len(m.BloomFilter)
	if l > 0 {
		n += 1 + l + sovTraindb(uint64(l))
	}
	if m.MaxVersion != 0 {
		n += 1 + sovTraindb(uint64(m.MaxVersion))
	}
	if m.KeyCount != 0 {
		n += 1 + sovTraindb(uint64(m.KeyCount))
	}
	if m.StaleDataSize != 0 {
		n += 1 + sovTraindb(uint64(m.StaleDataSize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BlockOffset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovTraindb(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovTraindb(uint64(m.Offset))
	}
	if m.Size_ != 0 {
		n += 1 + sovTraindb(uint64(m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTraindb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTraindb(x uint64) (n int) {
	return sovTraindb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ManifestChangeSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraindb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManifestChangeSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManifestChangeSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTraindb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTraindb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = append(m.Changes, &ManifestChange{})
			if err := m.Changes[len(m.Changes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTraindb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTraindb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ManifestChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraindb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ManifestChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ManifestChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ManifestChange_ChangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelId", wireType)
			}
			m.LevelId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckSum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTraindb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTraindb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckSum = append(m.CheckSum[:0], dAtA[iNdEx:postIndex]...)
			if m.CheckSum == nil {
				m.CheckSum = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTraindb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTraindb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TableIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraindb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: tableIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: tableIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offsets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTraindb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTraindb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Offsets = append(m.Offsets, &BlockOffset{})
			if err := m.Offsets[len(m.Offsets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BloomFilter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTraindb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTraindb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BloomFilter = append(m.BloomFilter[:0], dAtA[iNdEx:postIndex]...)
			if m.BloomFilter == nil {
				m.BloomFilter = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxVersion", wireType)
			}
			m.MaxVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyCount", wireType)
			}
			m.KeyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.KeyCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaleDataSize", wireType)
			}
			m.StaleDataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StaleDataSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTraindb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTraindb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockOffset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTraindb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: blockOffset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: blockOffset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTraindb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTraindb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTraindb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTraindb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTraindb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTraindb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTraindb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTraindb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTraindb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTraindb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTraindb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTraindb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTraindb = fmt.Errorf("proto: unexpected end of group")
)
